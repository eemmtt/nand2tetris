// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. 
 * The inM input holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Feed Register A from instruction[] or ALU
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=MuxAorALU);
    And(a=instruction[15], b=instruction[3], out=writeM);
    //Logic for loading ARegister
    Not(in=instruction[15], out=IsA);
    Or(a=instruction[5], b=IsA, out=LoadA);
    ARegister(
        in=MuxAorALU, 
        load=LoadA, 
        out=ARegOut, 
        out[0..14]=addressM
    );
    DRegister(
        in=ALUOut, 
        load=instruction[4], 
        out=DRegOut
    );
    Mux16(
        a=false, 
        b=ALUOut, 
        sel=instruction[3], 
        out=outM
    );
    Mux16(
        a=ARegOut, 
        b=inM, 
        sel=instruction[12], 
        out=MuxAMOut
    );
    ALU(
        // IN
        x=DRegOut,
        y=MuxAMOut,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f= instruction[7],
        no=instruction[6],

        // OUT
        out=ALUOut,
        zr=zrOut,
        ng=ngOut
    );
    //PC.. some logic based on ALU outputs and jjj...
    And(a=instruction[2], b=ngOut, out=j1AndNg);
    PC(in=ARegOut, load=false, inc=true, reset=reset, out[0..14]=pc);
}

/*
instruction[16]->   0***,****,****,**** = A Instruction
                    1***,****,****,**** = C Instruction

C Instruction =     1**a,cccc,ccdd,djjj
                    a = feed ALU from A or M (instruction[12])
                    c = ALU control bits (6 total)
                    d = "destination", which registers get ALU output 
                        d1 -> goes to A Reg (instruction[5])
                        d2 -> goes to D Reg (instruction[4])
                        d3 -> goes to M Reg (instruction[3])
                    j = "jump", next instruction to fetch
                        j1 ALUOut < 0   | ngOut == 1 (instruction[2])
                        j2 ALUOut == 0  | zrOut == 1 (instruction[1])
                        j3 ALUOut > 0   | ngOut == 0 (instruction[0])
*/