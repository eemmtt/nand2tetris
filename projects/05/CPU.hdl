// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Instruction type A or C
    DMux(in=true, sel=instruction[15], a=IsTypeA, b=isTypeC);
    // Feed Register A from instruction[16] or ALU
    Mux16(a=ALUOut, b=instruction, sel=IsTypeA, out=MuxAorALU);
    
    DRegister(in=ALUOut, load=true, out=DRegOut);
    ARegister(in=MuxAorALU, load=true, out=ARegOut, out=addressM);
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=MuxAMOut); // Mux(A,M)
    ALU(
        // IN
        x=,
        y=,
        zx=,
        nx=,
        zy=,
        ny=,
        f=,
        no=,

        // OUT
        out=ALUOut,
        zr=,
        ng=,
    );
    //PC load == 1 when jjj != 0, else load == 0 and inc == 1
    Or(a=instruction[0], b=instruction[1], out=Or1);
    Or(a=Or1, b=instruction[2], out= ....????? )
    PC(in=ARegOut, load=, inc=, reset=reset, out=);
}

/*
instruction[16]->   0***,****,****,**** = A Instruction
                    1***,****,****,**** = C Instruction

C Instruction =     1__a,cccc,ccdd,djjj
                    a = feed ALU from A or M
                    c = ALU control bits (6 total)
                    d = which registers get ALU output
                    j = next instruction to fetch ("jump")
*/